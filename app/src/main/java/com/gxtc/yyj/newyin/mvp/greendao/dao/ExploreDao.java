package com.gxtc.yyj.newyin.mvp.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gxtc.yyj.newyin.mvp.greendao.bean.Explore;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPLORE".
*/
public class ExploreDao extends AbstractDao<Explore, Long> {

    public static final String TABLENAME = "EXPLORE";

    /**
     * Properties of entity Explore.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Ad = new Property(1, String.class, "ad", false, "AD");
        public final static Property Advertises = new Property(2, String.class, "advertises", false, "ADVERTISES");
        public final static Property HasUnread = new Property(3, int.class, "hasUnread", false, "HAS_UNREAD");
        public final static Property HasVisible = new Property(4, boolean.class, "hasVisible", false, "HAS_VISIBLE");
        public final static Property Interval = new Property(5, int.class, "interval", false, "INTERVAL");
        public final static Property MaxId = new Property(6, long.class, "maxId", false, "MAX_ID");
        public final static Property NextCursor = new Property(7, long.class, "nextCursor", false, "NEXT_CURSOR");
        public final static Property PreviousCursor = new Property(8, long.class, "previousCursor", false, "PREVIOUS_CURSOR");
        public final static Property SinceId = new Property(9, long.class, "sinceId", false, "SINCE_ID");
        public final static Property Status = new Property(10, String.class, "status", false, "STATUS");
        public final static Property TotalNumber = new Property(11, int.class, "totalNumber", false, "TOTAL_NUMBER");
        public final static Property UveBlank = new Property(12, int.class, "uveBlank", false, "UVE_BLANK");
    }


    public ExploreDao(DaoConfig config) {
        super(config);
    }
    
    public ExploreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPLORE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"AD\" TEXT," + // 1: ad
                "\"ADVERTISES\" TEXT," + // 2: advertises
                "\"HAS_UNREAD\" INTEGER NOT NULL ," + // 3: hasUnread
                "\"HAS_VISIBLE\" INTEGER NOT NULL ," + // 4: hasVisible
                "\"INTERVAL\" INTEGER NOT NULL ," + // 5: interval
                "\"MAX_ID\" INTEGER NOT NULL ," + // 6: maxId
                "\"NEXT_CURSOR\" INTEGER NOT NULL ," + // 7: nextCursor
                "\"PREVIOUS_CURSOR\" INTEGER NOT NULL ," + // 8: previousCursor
                "\"SINCE_ID\" INTEGER NOT NULL ," + // 9: sinceId
                "\"STATUS\" TEXT," + // 10: status
                "\"TOTAL_NUMBER\" INTEGER NOT NULL ," + // 11: totalNumber
                "\"UVE_BLANK\" INTEGER NOT NULL );"); // 12: uveBlank
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPLORE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Explore entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String ad = entity.getAd();
        if (ad != null) {
            stmt.bindString(2, ad);
        }
 
        String advertises = entity.getAdvertises();
        if (advertises != null) {
            stmt.bindString(3, advertises);
        }
        stmt.bindLong(4, entity.getHasUnread());
        stmt.bindLong(5, entity.getHasVisible() ? 1L: 0L);
        stmt.bindLong(6, entity.getInterval());
        stmt.bindLong(7, entity.getMaxId());
        stmt.bindLong(8, entity.getNextCursor());
        stmt.bindLong(9, entity.getPreviousCursor());
        stmt.bindLong(10, entity.getSinceId());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
        stmt.bindLong(12, entity.getTotalNumber());
        stmt.bindLong(13, entity.getUveBlank());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Explore entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String ad = entity.getAd();
        if (ad != null) {
            stmt.bindString(2, ad);
        }
 
        String advertises = entity.getAdvertises();
        if (advertises != null) {
            stmt.bindString(3, advertises);
        }
        stmt.bindLong(4, entity.getHasUnread());
        stmt.bindLong(5, entity.getHasVisible() ? 1L: 0L);
        stmt.bindLong(6, entity.getInterval());
        stmt.bindLong(7, entity.getMaxId());
        stmt.bindLong(8, entity.getNextCursor());
        stmt.bindLong(9, entity.getPreviousCursor());
        stmt.bindLong(10, entity.getSinceId());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
        stmt.bindLong(12, entity.getTotalNumber());
        stmt.bindLong(13, entity.getUveBlank());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Explore readEntity(Cursor cursor, int offset) {
        Explore entity = new Explore( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ad
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // advertises
            cursor.getInt(offset + 3), // hasUnread
            cursor.getShort(offset + 4) != 0, // hasVisible
            cursor.getInt(offset + 5), // interval
            cursor.getLong(offset + 6), // maxId
            cursor.getLong(offset + 7), // nextCursor
            cursor.getLong(offset + 8), // previousCursor
            cursor.getLong(offset + 9), // sinceId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // status
            cursor.getInt(offset + 11), // totalNumber
            cursor.getInt(offset + 12) // uveBlank
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Explore entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAd(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAdvertises(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHasUnread(cursor.getInt(offset + 3));
        entity.setHasVisible(cursor.getShort(offset + 4) != 0);
        entity.setInterval(cursor.getInt(offset + 5));
        entity.setMaxId(cursor.getLong(offset + 6));
        entity.setNextCursor(cursor.getLong(offset + 7));
        entity.setPreviousCursor(cursor.getLong(offset + 8));
        entity.setSinceId(cursor.getLong(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTotalNumber(cursor.getInt(offset + 11));
        entity.setUveBlank(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Explore entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Explore entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Explore entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
